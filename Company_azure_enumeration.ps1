#
# Company Azure Enumeration
# Powered by f0ns1
#
param($input_domain, $temp_file)

Import-Module C:\Users\admin\Downloads\Tools\Tools\AADInternals\AADInternals\0.6.8\AADInternals.psd1
Import-Module C:\Users\admin\Downloads\Tools\Tools\MicroBurst\Misc\Invoke-EnumerateAzureSubDomains.ps1

$TEMP_FILE = $temp_file
Invoke-EnumerateAzureSubDomains -Base $input_domain > $TEMP_FILE

Function Get-WhoIs {
    [cmdletbinding()]
    [OutputType("WhoIsResult")]
    Param (
        [parameter(Position = 0,
            Mandatory,
            HelpMessage = "Enter an IPV4 address to lookup with WhoIs",
            ValueFromPipeline,
            ValueFromPipelineByPropertyName)]
        [ValidateNotNullOrEmpty()]
        [ValidatePattern("^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")]
         [ValidateScript( {
            #verify each octet is valid to simplify the regex
                $test = ($_.split(".")).where({[int]$_ -gt 254})
                if ($test) {
                    Throw "$_ does not appear to be a valid IPv4 address"
                    $false
                }
                else {
                    $true
                }
            })]
        [string]$IPAddress
    )

    Begin {
        Write-Verbose "Starting $($MyInvocation.Mycommand)"
        $baseURL = 'http://whois.arin.net/rest'
        #default is XML anyway
        $header = @{"Accept" = "application/xml"}

    } #begin

    Process {
        Write-Verbose "Getting WhoIs information for $IPAddress"
        $url = "$baseUrl/ip/$ipaddress"
        Try {
            $r = Invoke-Restmethod $url -Headers $header -ErrorAction stop
            Write-verbose ($r.net | Out-String)
        }
        Catch {
            $errMsg = "Sorry. There was an error retrieving WhoIs information for $IPAddress. $($_.exception.message)"
            $host.ui.WriteErrorLine($errMsg)
        }

        if ($r.net) {
            Write-Verbose "Creating result"
            [pscustomobject]@{
                PSTypeName             = "WhoIsResult"
                IP                     = $ipaddress
                Name                   = $r.net.name
                RegisteredOrganization = $r.net.orgRef.name
                City                   = (Invoke-RestMethod $r.net.orgRef.'#text').org.city
                StartAddress           = $r.net.startAddress
                EndAddress             = $r.net.endAddress
                NetBlocks              = $r.net.netBlocks.netBlock | foreach-object {"$($_.startaddress)/$($_.cidrLength)"}
                Updated                = $r.net.updateDate -as [datetime]
            }
        } #If $r.net
    } #Process

    End {
        Write-Verbose "Ending $($MyInvocation.Mycommand)"
    } #end
}


$Domains= Get-Content $TEMP_FILE


echo "F0ns1 Azure Enumeration"
foreach ($line in $Domains) { 
    echo $line; 
    if($line -like "*$input_domain*" ){
    $domain=$line.Split(" ")[0]; 
    echo "||=== $domain ====>"; 
    $dns = Resolve-DnsName $domain;
    $dns
    if($dns -ne $null -and $dns.IP4Address -ne ""){
           foreach ($ip in $dns.IP4Address){
                $whois= Get-WhoIs -IPAddress $ip 2> $null
                $whois
            }
    }
    $subdomain = Get-AADIntTenantDomains -Domain $domain; 
    if($subdomain -ne $null) {
        foreach ($url in $subdomain) {
            echo "||||$domain ===>$url"; 
            $dns = Resolve-DnsName $url;
            $dns
            if($dns -ne $null -and $dns.IP4Address -ne ""){
                foreach ($ip in $dns.IP4Address){
                    $whois= Get-WhoIs -IPAddress $ip 2> $null
                    $whois
                }
            }
         }
    } 
    }
}
